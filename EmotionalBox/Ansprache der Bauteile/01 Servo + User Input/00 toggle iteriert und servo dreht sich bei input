/*
Toggle:
Ein Kabel (z.B. rot) an PIN 2 stecken. Das andere (weiß) muss auf Ground (PIN G) gesteckt werden.

Servo:
Spannung bei 5V anschließen!!
Farbe               Position            Koordinate
Braun               oben                PIN 15 -
Rot                 oben                PIN 15 +
Gelb                oben                PIN 15 (A10)
*/

#include <Servo.h>

Servo myservo;

//Toggle switch
const int togglePin = 2;

const int temporalThreshold = 100; // wie lange wird gebraucht bis wir eine state Änderung als einen neuen State akzeptieren
volatile int actionCounter = 0; // variable to count which action we're at
volatile byte toggleState = LOW; // variables will change; variable for reading the pushbutton status
unsigned long lastUpdate = -1; // Der Zeitstempel von der letzten Veränderung
boolean blocked = false; // Die Methode die im Interrupt aufgerufen wird (countActions) wird davon abgehalten wiederholt aufgerufen zu werden
int pos = 0; //Servo starting position


void setup() {
  actionCounter = 0;
  pinMode(togglePin,INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(togglePin), countActions, CHANGE);
  myservo.attach(15);
  myservo.write(0);
  Serial.print("Let'S go :)");
}

void loop() {

  toggleState = digitalRead(togglePin);

    // toggle OFF
  if (toggleState == HIGH && pos >= 0) {
    Serial.print("'OFF' & pos  ");
    Serial.print(pos);
    Serial.println();
    myservo.write(pos);
    pos--;
    delay(15);
  }

    // toggle ON
  else if (toggleState == LOW && pos <= 180) {
    Serial.print("'ON' & pos  ");
    Serial.print(pos);
    Serial.println();
    myservo.write(pos);
    pos++;
    delay(15);
  }


}

void countActions()
{
  // Wenn die letzte Veränderung die Zeit des temporalThreshold's her ist, wird ausgeführt.
  if (lastUpdate + temporalThreshold < millis() && blocked == false) {
    blocked = true;
    // merkt sich wann der Änderungsvorgang gestartet wurde
    lastUpdate = millis();
    // wichtig!! Da im Wechsel noch viel passieren kann, warten wir bis sich der State endgültig stabilisiert hat
    delay(50);
    // lesen den Status aus
    toggleState = digitalRead(togglePin);

    if (toggleState == LOW) {
      actionCounter += 1;
      Serial.println("ON ++");
    } else {
      Serial.println("OFF");
    }
    Serial.println("Updated " + String(actionCounter) + " state: " + String(toggleState));
    // Methode wird freigegeben
    blocked = false;
  }
}
