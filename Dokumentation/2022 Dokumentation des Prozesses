

##*11.10.2022*
Todo (1a):
- [x] Spannungsversorgung nicht vergessen! Der Servo hatte sich anfangs nicht gedreht... er hatte auch keine
  Spannung. 5V Pin mit dem + auf der gleichen Seite verbinden.

Todo (1c):
- [x] Funktioniert, siehe: **EmotionalBox/Ansprache der Bauteile/01 Servo + User Input/00 toggle iteriert und servo 
  dreht 
  sich bei input**
- [x] Funktioniert, aber nicht schön. Das ganze muss objektorientiert gehen damit der Code schöner und 
  übersichtlicher ist.

###Objekt Orientiertes Programmieren mit C++
https://www.mintgruen.tu-berlin.de/robotikWiki/doku.php?id=techniken:objektorient

https://forum.arduino.cc/t/using-a-library-in-a-class/325678/6

Servo zum ersten Mal Objektorientiert angesteuert!! Der Code aus dem zweiten Link hat funktioniert :)

Da in dem Code aber sehr primitiv der Servo nur seine Position wechselt, schauen, ob ich das mit dem Input irgendwie 
kombinieren kann, bzw. ob ich meinen bisherigen Servo Code umsetzen kann mit der While Schleife. Aber das mal mit 
mehr Schlaf :D

##*17.10.2022*
Objektorientieres Ansteuern....

TODO heute:
- [ ] Iteration +1 jedes Mal, wenn der Kipp schalter auf "ON" geschaltet wird
- [ ] Timer, der xx Sekunden wartet, bis er die Iteration wieder auf 0 setzt. Das ist der "Reset"
- [ ] Wenn der Schalter umgelegt wird, dreht sich der servo bis zum Anschlag / bis er wieder zurückgesetzt wird
- [x] ~~Kippschalter Kable neu gelötet~~

... wollte mal den Kippschalter Objektorientiert hinzufügen aber das wird mir zu wild die Klassen in der einen Datei 
zu haben, also jetzt erstmal schauen wie ich verschiedene Dateien anlegen kann. :')

https://www.circuitbasics.com/programming-with-classes-and-objects-on-the-arduino/

##*20.10.2022*
Bestellung Display und zwei neue Motoren getätigt :)

Außerdem hab ich am 17. noch Code im Internet gefunden der ganz nice als Grundlage ist. Ich muss genug machen, da 
baue ich lieber den Code von der anderen Person aus und gut ist. Etwas Arbeit muss ich mir ersparen da noch ECHT 
viel ansteht.

###IP3506:

- [ ] TODO: die Kabel nochmal besser absichern damit ich keinen Kurzschluss kriege
Der ISP3506 schützt den Akku damit er sich nicht tiefenentlädt & kaputt geht wenn er zu leer ist

5VOUT  -> TEENSY 5V <br>
GND    -> TEENSY GND<br>
BAT    -> AKKU<br>
GND    -> AKKU<br>
GND    -> MICRO USB (das worüber ich aufladen werde)<br>
VIN    -> MICRO USB<br>

Das USB C Ding in Blau was wir damals bestellt haben ist quasi das gleiche, kann aber nur 1 Amper. Der IP3506 kann 2 
Amper. Je nach dem was meine Motoren verbrauchen, kann es auch sein, dass ich das brauche. Also werde ich einfach 
einen Micro USB Anschluss dranlöten und gut ist, USB-C hatten wir ja damals hauptsächlich wegen Florian bestellt.

##*21.10.2022*
Verschiedenes gelernt...

...ich werde die FastLED Library für meinen LED Strip nutzen. Das ist die Doku dazu: http://fastled.io/docs/3.1/md__r_e_a_d_m_e.html

...für meinen LED Strip bräuchte ich eigentlich den Logic Shifter (4-Channel I2C-safe-bi-directional logic level c)

...Was für der logic Shifter?
          Beispiel 1: Die LED registrieren LOW bei 0,irgendwas und HIGH bei 4 irgendwas Volt. Bekommen aber nur 3,3V 
aus meinem teensy. Warum das funktioniert, curios, aber es tuts. Besser wäre es aber, wenn er die 5V bekommen würde. 
Also schließe ich den teensy an den logic shifter, und die LED an den Logic shifter und die 3,3V werden zu 5V 
"übersetzt".
          Beispiel 2: Das ist anders herum auch wichtig um den Teensy zu schützen, zB mit meinem Distanz Sensor. Der 
Sensor schickt 5V zurück, der Teensy kann aber nur 3.3V. Wenn ich Pech habe geht dann nur der Pin kaputt, wenn ich 
RICHTIG Pech habe, geht der ganze Teensy kaputt. Das ist blöd.

...Wie schalte ich den logic shifter an den Teensy? Ich verbinde LV mit meinem 3V Pin auf dem Teensy, und GND mit 
GND (duh). Auf der anderen Seite kommt dann 5V raus. Dann muss ich auch noch A1 bspw. mit dem Pin auf dem Teensy 
verbinden den ich benutzen möchte. Und meine LED dann einfach an A1. Und damit sind die dann mit dem Teensy verbunden.

...Serial Print überladen. Fürs Debuggen ist serial print ganz gut, aber ist aufwendig.

...Interrupts benutzen um nicht im Loop DigitalRead zu machen. Das ist sehr ineffizient. Und dann den DigitalRead in 
einem State speichern, und einen oldToggleState nutzen um zu vergleichen ob der State sich verändert hat. :)

### Interrupts
https://www.pjrc.com/teensy/interrupts.html
https://www.arduino.cc/reference/en/language/functions/external-interrupts/attachinterrupt/
https://techoverflow.net/2022/02/16/teensy-4-1-arduino-external-interrupt-pin-interrupt-minimal-example/



## 9.11.2022
Uff voll lange nicht mehr dokumentiert... aber ich hab das display und ich konnte es bereits mal anmachen. Heute 
will ich schauen, dass ich das zumindest sicher an meinen teensy bekomme. Dafür werd ich hoffentlich den Lars fragen

Q: Was sind das ales für Brücken die ich bei mir hier habe?

## 15.11.2022
ICH HASSE ES. Ich hatte funktionierenden Code, aber der ist weg... und ich weiß nicht wo. ich kann wieder nicht 
anständig hochiterieren. UND ICH VERSTEHE NICHT WARUM.

Immerhin funktioniert mein Sensor. Aber das wars gerade auch schon

Display geht immernoch nicht.

## 22.11.2022
Oh ich sehe ich habe länger schon nicht dokumentiert. Es ist einiges passiert.

Display geht, wird über den Serial4 angesteuert, hab einen tollen YT Kanal entdeckt der da sehr einfach gezeigt hat 
wie es geht. Ohne jeglichen Schnick schnack, die Library ist Müll... 

Es funktioniert ebenfalls seit paar Tagen schon der Distance Sensor, der war sehr einfach.

Und seit heute (dank Lars) funktioniert auch der Reflektionssensor (QTR-1RC) Irgendwie hat er über den level shifter 
nicht richtig funktioniert, also ist er nun so angeschlossen:

GND an das GND der 3,3V
VIN an 3,3V
OUT an dem Pin 20 aktuell. Ich werde den funktionierenden Beispielcode mal sichern, so habe ich wenigstens etwas. 
UNd dann schaue ich, dass ich ihn eingebettet bekomme in MEINEN Code.

Gestern habe ich mir auch Gedanken dazu gemacht, wie ich den Programmablauf steuere, hab da auch schon eine Idee 
aber die werde ich noch umsetzen müssen. :)





